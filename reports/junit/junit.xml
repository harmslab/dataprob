<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="3" skipped="0" tests="132" time="108.483" timestamp="2024-08-27T12:49:57.978553" hostname="banks"><testcase classname="tests.dataprob.fitters.bayesian.test__prior_processing" name="test__find_normalization" time="0.980" /><testcase classname="tests.dataprob.fitters.bayesian.test__prior_processing" name="test__reconcile_bounds_and_priors" time="0.005" /><testcase classname="tests.dataprob.fitters.bayesian.test__prior_processing" name="test__find_uniform_value" time="0.001" /><testcase classname="tests.dataprob.fitters.bayesian.test__prior_processing" name="test__sample_gaussian" time="0.375" /><testcase classname="tests.dataprob.fitters.bayesian.test__prior_processing" name="test__cover_uniform" time="0.001" /><testcase classname="tests.dataprob.fitters.bayesian.test__prior_processing" name="test_create_walkers" time="0.240" /><testcase classname="tests.dataprob.fitters.bayesian.test_bayesian_sampler" name="test_BayesianSampler__init__" time="0.011" /><testcase classname="tests.dataprob.fitters.bayesian.test_bayesian_sampler" name="test__setup_priors" time="0.259" /><testcase classname="tests.dataprob.fitters.bayesian.test_bayesian_sampler" name="test_BayesianSampler__ln_prior" time="0.154" /><testcase classname="tests.dataprob.fitters.bayesian.test_bayesian_sampler" name="test_BayesianSampler_ln_prior" time="0.149" /><testcase classname="tests.dataprob.fitters.bayesian.test_bayesian_sampler" name="test_BayesianSampler__ln_prob" time="0.086" /><testcase classname="tests.dataprob.fitters.bayesian.test_bayesian_sampler" name="test_BayesianSampler_ln_prob" time="0.149" /><testcase classname="tests.dataprob.fitters.bayesian.test_bayesian_sampler" name="test_BayesianSampler_fit" time="0.202" /><testcase classname="tests.dataprob.fitters.bayesian.test_bayesian_sampler" name="test_BayesianSampler__fit" time="0.832" /><testcase classname="tests.dataprob.fitters.bayesian.test_bayesian_sampler" name="test_BayesianSampler__update_fit_df" time="0.224" /><testcase classname="tests.dataprob.fitters.bayesian.test_bayesian_sampler" name="test_BayesianSampler_fit_info" time="0.107" /><testcase classname="tests.dataprob.fitters.bayesian.test_bayesian_sampler" name="test_BayesianSampler___repr__" time="0.455" /><testcase classname="tests.dataprob.fitters.test_base" name="test__pretty_zeropad_str" time="0.000" /><testcase classname="tests.dataprob.fitters.test_base" name="test_Fitter__init__" time="0.045" /><testcase classname="tests.dataprob.fitters.test_base" name="test_Fitter__sanity_check" time="0.011" /><testcase classname="tests.dataprob.fitters.test_base" name="test_Fitter__process_obs_args" time="0.021" /><testcase classname="tests.dataprob.fitters.test_base" name="test_Fitter_fit" time="0.040" /><testcase classname="tests.dataprob.fitters.test_base" name="test_Fitter__fit" time="0.011" /><testcase classname="tests.dataprob.fitters.test_base" name="test_Fitter__unweighted_residuals" time="0.012" /><testcase classname="tests.dataprob.fitters.test_base" name="test_Fitter_unweighted_residuals" time="0.018" /><testcase classname="tests.dataprob.fitters.test_base" name="test_Fitter__weighted_residuals" time="0.012" /><testcase classname="tests.dataprob.fitters.test_base" name="test_Fitter_weighted_residuals" time="0.018" /><testcase classname="tests.dataprob.fitters.test_base" name="test_Fitter__ln_like" time="0.012" /><testcase classname="tests.dataprob.fitters.test_base" name="test_Fitter_ln_like" time="0.016" /><testcase classname="tests.dataprob.fitters.test_base" name="test_Fitter_y_obs" time="0.011" /><testcase classname="tests.dataprob.fitters.test_base" name="test_Fitter_y_std" time="0.011" /><testcase classname="tests.dataprob.fitters.test_base" name="test_Fitter_param_df" time="0.014" /><testcase classname="tests.dataprob.fitters.test_base" name="test_Fitter_non_fit_kwargs" time="0.020" /><testcase classname="tests.dataprob.fitters.test_base" name="test_Fitter_data_df" time="0.132" /><testcase classname="tests.dataprob.fitters.test_base" name="test_Fitter__initialize_fit_df" time="0.002" /><testcase classname="tests.dataprob.fitters.test_base" name="test_Fitter__update_fit_df" time="0.011" /><testcase classname="tests.dataprob.fitters.test_base" name="test_Fitter_fit_df" time="0.011" /><testcase classname="tests.dataprob.fitters.test_base" name="test_Fitter_samples" time="0.011" /><testcase classname="tests.dataprob.fitters.test_base" name="test_Fitter_get_sample_df" time="0.386" /><testcase classname="tests.dataprob.fitters.test_base" name="test_Fitter_write_samples" time="0.016" /><testcase classname="tests.dataprob.fitters.test_base" name="test_Fitter_append_samples" time="0.074" /><testcase classname="tests.dataprob.fitters.test_base" name="test_Fitter_num_params" time="0.067" /><testcase classname="tests.dataprob.fitters.test_base" name="test_Fitter_num_obs" time="0.021" /><testcase classname="tests.dataprob.fitters.test_base" name="test_Fitter_success" time="0.011" /><testcase classname="tests.dataprob.fitters.test_base" name="test_Fitter_fit_info" time="0.011" /><testcase classname="tests.dataprob.fitters.test_base" name="test_Fitter_fit_result" time="0.011" /><testcase classname="tests.dataprob.fitters.test_bootstrap" name="test_BootstrapFitter__init" time="0.011" /><testcase classname="tests.dataprob.fitters.test_bootstrap" name="test_BootstrapFitter_fit" time="0.047" /><testcase classname="tests.dataprob.fitters.test_bootstrap" name="test_BootstrapFitter__fit" time="0.098" /><testcase classname="tests.dataprob.fitters.test_bootstrap" name="test_BootstrapFitter__update_fit_df" time="0.075" /><testcase classname="tests.dataprob.fitters.test_bootstrap" name="test_BootstrapFitter___repr__" time="0.082" /><testcase classname="tests.dataprob.fitters.test_ml" name="test_MLFitter___init__" time="0.011" /><testcase classname="tests.dataprob.fitters.test_ml" name="test_MLFitter_fit" time="0.023" /><testcase classname="tests.dataprob.fitters.test_ml" name="test_MLFitter__fit" time="0.065" /><testcase classname="tests.dataprob.fitters.test_ml" name="test_MLFitter__update_fit_df" time="0.042" /><testcase classname="tests.dataprob.fitters.test_ml" name="test_MLFitter_samples" time="0.071" /><testcase classname="tests.dataprob.fitters.test_ml" name="test_MLFitter___repr__" time="0.034" /><testcase classname="tests.dataprob.fitters.test_setup" name="test_setup" time="0.118" /><testcase classname="tests.dataprob.model_wrapper.test__dataframe_processing" name="test__check_name" time="0.002" /><testcase classname="tests.dataprob.model_wrapper.test__dataframe_processing" name="test__build_columns" time="0.014" /><testcase classname="tests.dataprob.model_wrapper.test__dataframe_processing" name="test__check_bounds" time="0.024" /><testcase classname="tests.dataprob.model_wrapper.test__dataframe_processing" name="test__check_guesses" time="0.011" /><testcase classname="tests.dataprob.model_wrapper.test__dataframe_processing" name="test__check_priors" time="0.021" /><testcase classname="tests.dataprob.model_wrapper.test__dataframe_processing" name="test__df_to_dict" time="0.002" /><testcase classname="tests.dataprob.model_wrapper.test__dataframe_processing" name="test_validate_dataframe" time="0.162" /><testcase classname="tests.dataprob.model_wrapper.test__dataframe_processing" name="test_param_into_existing" time="0.007" /><testcase classname="tests.dataprob.model_wrapper.test__function_processing" name="test_analyze_fcn_sig" time="0.002" /><testcase classname="tests.dataprob.model_wrapper.test__function_processing" name="test_reconcile_fittable" time="0.001" /><testcase classname="tests.dataprob.model_wrapper.test__function_processing" name="test_analyze_vector_input_fcn" time="0.001" /><testcase classname="tests.dataprob.model_wrapper.test_model_wrapper" name="test_ModelWrapper___init__" time="0.027" /><testcase classname="tests.dataprob.model_wrapper.test_model_wrapper" name="test_ModelWrapper__load_model" time="0.070" /><testcase classname="tests.dataprob.model_wrapper.test_model_wrapper" name="test_ModelWrapper__validate_non_fit_kwargs" time="0.014" /><testcase classname="tests.dataprob.model_wrapper.test_model_wrapper" name="test_ModelWrapper_finalize_params" time="0.027" /><testcase classname="tests.dataprob.model_wrapper.test_model_wrapper" name="test_ModelWrapper_update_params" time="0.069" /><testcase classname="tests.dataprob.model_wrapper.test_model_wrapper" name="test_ModelWrapper_model" time="0.046" /><testcase classname="tests.dataprob.model_wrapper.test_model_wrapper" name="test_ModelWrapper_fast_model" time="0.014" /><testcase classname="tests.dataprob.model_wrapper.test_model_wrapper" name="test_ModelWrapper_param_df" time="0.010" /><testcase classname="tests.dataprob.model_wrapper.test_model_wrapper" name="test_ModelWrapper_non_fit_kwargs" time="0.007" /><testcase classname="tests.dataprob.model_wrapper.test_model_wrapper" name="test_ModelWrapper_unfixed_mask" time="0.010" /><testcase classname="tests.dataprob.model_wrapper.test_model_wrapper" name="test_ModelWrapper___repr__" time="0.022" /><testcase classname="tests.dataprob.model_wrapper.test_vector_model_wrapper" name="test_VectorModelWrapper__init__" time="0.010" /><testcase classname="tests.dataprob.model_wrapper.test_vector_model_wrapper" name="test_VectorModelWrapper__load_model" time="0.044" /><testcase classname="tests.dataprob.model_wrapper.test_vector_model_wrapper" name="test_VectorModelWrapper__finalize_params" time="0.011" /><testcase classname="tests.dataprob.model_wrapper.test_vector_model_wrapper" name="test_VectorModelWrapper_model" time="0.056" /><testcase classname="tests.dataprob.model_wrapper.test_vector_model_wrapper" name="test_VectorModelWrapper_fast_model" time="0.013" /><testcase classname="tests.dataprob.model_wrapper.test_wrap_function" name="test_wrap_function" time="0.150" /><testcase classname="tests.dataprob.plot.test__plot_utils" name="test_get_plot_features" time="0.011" /><testcase classname="tests.dataprob.plot.test__plot_utils" name="test_get_style" time="0.001" /><testcase classname="tests.dataprob.plot.test__plot_utils" name="test_get_vectors" time="0.052" /><testcase classname="tests.dataprob.plot.test__plot_utils" name="test__get_edges" time="0.001" /><testcase classname="tests.dataprob.plot.test__plot_utils" name="test_get_plot_dimensions" time="0.000" /><testcase classname="tests.dataprob.plot.test__plot_utils" name="test_sync_axes" time="0.140" /><testcase classname="tests.dataprob.plot.test_appearance" name="test_default_styles" time="0.000" /><testcase classname="tests.dataprob.plot.test_corner" name="test_plot_corner" time="0.767" /><testcase classname="tests.dataprob.plot.test_plot_fit" name="test_plot_fit" time="0.441" /><testcase classname="tests.dataprob.plot.test_plot_residuals" name="test_plot_residuals" time="1.365" /><testcase classname="tests.dataprob.plot.test_plot_residuals_hist" name="test_plot_residuals_hist" time="0.335" /><testcase classname="tests.dataprob.plot.test_plot_summary" name="test_plot_summary" time="0.765" /><testcase classname="tests.dataprob.test_integration.test_binding" name="test_ml" time="0.751" /><testcase classname="tests.dataprob.test_integration.test_binding" name="test_bayesian" time="4.379" /><testcase classname="tests.dataprob.test_integration.test_binding" name="test_bootstrap" time="1.050" /><testcase classname="tests.dataprob.test_integration.test_exponential-saturation" name="test_ml" time="0.888" /><testcase classname="tests.dataprob.test_integration.test_exponential-saturation" name="test_bayesian" time="4.554" /><testcase classname="tests.dataprob.test_integration.test_exponential-saturation" name="test_bootstrap" time="1.046" /><testcase classname="tests.dataprob.test_integration.test_lagged-exponential" name="test_ml" time="0.873" /><testcase classname="tests.dataprob.test_integration.test_lagged-exponential" name="test_bayesian" time="4.315" /><testcase classname="tests.dataprob.test_integration.test_lagged-exponential" name="test_bootstrap" time="1.053" /><testcase classname="tests.dataprob.test_integration.test_linear-extrapolation-folding" name="test_ml" time="0.030"><failure message="assert np.int64(1) == 0&#10; +  where np.int64(1) = &lt;function sum at 0x106a3b870&gt;(array([11.9 , -4.2 ,  1.5 , -0.15,  0.1 , -0.03]) &lt; array([-0.91178131, -3.67977337,  1.21085992, -0.48992357, -0.5504159 ,\n       -0.12189199]))&#10; +    where &lt;function sum at 0x106a3b870&gt; = np.sum&#10; +    and   array([-0.91178131, -3.67977337,  1.21085992, -0.48992357, -0.5504159 ,\n       -0.12189199]) = &lt;built-in function array&gt;(name\ndG_unfold   -0.911781\nm_unfold    -3.679773\nb_native     1.210860\nm_native    -0.489924\nb_denat     -0.550416\nm_denat     -0.121892\nName: low_95, dtype: float64)&#10; +      where &lt;built-in function array&gt; = np.array">def test_ml():
    
&gt;       _core_test(method="ml")

tests/dataprob/test_integration/test_linear-extrapolation-folding.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

method = 'ml', method_kwargs = {}, linear_extrapolation = &lt;function _core_test.&lt;locals&gt;.linear_extrapolation at 0x17ab51300&gt;
gen_params = {'b_denat': 0.1, 'b_native': 1.5, 'dG_unfold': 11.9, 'm_denat': -0.03, ...}, T = 298, R = 0.001987, err = 0.2, num_points = 50
osmolyte = array([0.        , 0.16326531, 0.32653061, 0.48979592, 0.65306122,
       0.81632653, 0.97959184, 1.14285714, 1.306122...24, 6.69387755, 6.85714286, 7.02040816, 7.18367347,
       7.34693878, 7.51020408, 7.67346939, 7.83673469, 8.        ])

    def _core_test(method,**method_kwargs):
    
        # ------------------------------------------------------------------------
        # Define model and generate data
    
        def linear_extrapolation(dG_unfold=5,m_unfold=-2,
                                b_native=1,m_native=0,
                                b_denat=0,m_denat=0,
                                osmolyte=None,T=298.15,R=0.001987):
            """
            Linear extrapolation unfolding model.
    
            Parameters
            ----------
            dG_unfold : float, default=5
                unfolding free energy in water
            m_unfold : float, default=-2
                effect of osmoloyte on the folding energy
            b_native : float, default=1
                intercept of the native baseline
            m_native : float, defualt=0
                slope of the native baseline
            b_denat : float, default=0
                intercept of the denatured baseline
            m_denat : float, defualt=0
                slope of the denatured baseline
            osmolyte : numpy.ndarray
                array of osmolyte concentrations
            T : float, default=298.15
                temperature of experiment in K
            R : float, default=0.001987
                gas constant (default is kcal/mol)
    
            Returns
            -------
            signal : numpy.ndarray
                protein fraction folded signal as a function of osmolyte
            """
    
            RT = R*T
            dG = dG_unfold + m_unfold*osmolyte
            K = np.exp(-dG/RT)
    
            fx = 1/(1 + K)
            native_signal = (m_native*osmolyte + b_native)*fx
            denatured_signal = (m_denat*osmolyte + b_denat)*(1 - fx)
    
            return native_signal + denatured_signal
    
        # Parameter for staphylococcal nuclease d+phs protein, pH 7.0
        gen_params = {"dG_unfold":11.9,
                      "m_unfold":-4.2,
                      "b_native":1.5,
                      "m_native":-0.15,
                      "b_denat":0.1,
                      "m_denat":-0.03}
    
        # Generate data
        T = 298
        R = 0.001987
        err = 0.20
        num_points = 50
        osmolyte = np.linspace(0,8,num_points)
    
        y_obs_clean = linear_extrapolation(osmolyte=osmolyte,
                                           R=R,T=T,
                                           **gen_params)
        y_obs = y_obs_clean + np.random.normal(0,err,num_points)
        y_std = err*2
    
        test_fcn = linear_extrapolation
        non_fit_kwargs = {"osmolyte":osmolyte,
                        "R":R,
                        "T":T}
    
        # ------------------------------------------------------------------------
        # Run analysis
    
        f = dataprob.setup(some_function=test_fcn,
                           method=method,
                           non_fit_kwargs=non_fit_kwargs)
    
    
        f.fit(y_obs=y_obs,
            y_std=y_std,
            **method_kwargs)
    
        # make estimate lands between confidence intervals
        expected = np.array([gen_params[p] for p in f.fit_df.index])
&gt;       assert np.sum(expected &lt; np.array(f.fit_df["low_95"])) == 0
E       assert np.int64(1) == 0
E        +  where np.int64(1) = &lt;function sum at 0x106a3b870&gt;(array([11.9 , -4.2 ,  1.5 , -0.15,  0.1 , -0.03]) &lt; array([-0.91178131, -3.67977337,  1.21085992, -0.48992357, -0.5504159 ,\n       -0.12189199]))
E        +    where &lt;function sum at 0x106a3b870&gt; = np.sum
E        +    and   array([-0.91178131, -3.67977337,  1.21085992, -0.48992357, -0.5504159 ,\n       -0.12189199]) = &lt;built-in function array&gt;(name\ndG_unfold   -0.911781\nm_unfold    -3.679773\nb_native     1.210860\nm_native    -0.489924\nb_denat     -0.550416\nm_denat     -0.121892\nName: low_95, dtype: float64)
E        +      where &lt;built-in function array&gt; = np.array

tests/dataprob/test_integration/test_linear-extrapolation-folding.py:102: AssertionError</failure></testcase><testcase classname="tests.dataprob.test_integration.test_linear-extrapolation-folding" name="test_bayesian" time="4.897" /><testcase classname="tests.dataprob.test_integration.test_linear-extrapolation-folding" name="test_bootstrap" time="2.140"><failure message="ValueError: Axis limits cannot be NaN or Inf">@pytest.mark.slow
    def test_bootstrap():
    
&gt;       _core_test(method="bootstrap")

tests/dataprob/test_integration/test_linear-extrapolation-folding.py:125: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/dataprob/test_integration/test_linear-extrapolation-folding.py:109: in _core_test
    fig = dataprob.plot_corner(f)
../../../../miniconda3/lib/python3.12/site-packages/dataprob/plot/plot_corner.py:107: in plot_corner
    fig = corner.corner(to_plot,**kwargs)
../../../../miniconda3/lib/python3.12/site-packages/corner/corner.py:248: in corner
    return corner_impl(
../../../../miniconda3/lib/python3.12/site-packages/corner/core.py:289: in corner_impl
    _set_xlim(force_range, new_fig, ax, range[i])
../../../../miniconda3/lib/python3.12/site-packages/corner/core.py:915: in _set_xlim
    return ax.set_xlim(new_xlim)
../../../../miniconda3/lib/python3.12/site-packages/matplotlib/axes/_base.py:3711: in set_xlim
    return self.xaxis._set_lim(left, right, emit=emit, auto=auto)
../../../../miniconda3/lib/python3.12/site-packages/matplotlib/axis.py:1235: in _set_lim
    v0 = self.axes._validate_converted_limits(v0, self.convert_units)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Axes: &gt;, limit = np.float64(nan), convert = &lt;bound method Axis.convert_units of &lt;matplotlib.axis.XAxis object at 0x17ef9e510&gt;&gt;

    def _validate_converted_limits(self, limit, convert):
        """
        Raise ValueError if converted limits are non-finite.
    
        Note that this function also accepts None as a limit argument.
    
        Returns
        -------
        The limit value after call to convert(), or None if limit is None.
        """
        if limit is not None:
            converted_limit = convert(limit)
            if isinstance(converted_limit, np.ndarray):
                converted_limit = converted_limit.squeeze()
            if (isinstance(converted_limit, Real)
                    and not np.isfinite(converted_limit)):
&gt;               raise ValueError("Axis limits cannot be NaN or Inf")
E               ValueError: Axis limits cannot be NaN or Inf

../../../../miniconda3/lib/python3.12/site-packages/matplotlib/axes/_base.py:3632: ValueError</failure></testcase><testcase classname="tests.dataprob.test_integration.test_linear" name="test_ml" time="0.829" /><testcase classname="tests.dataprob.test_integration.test_linear" name="test_bayesian" time="4.223" /><testcase classname="tests.dataprob.test_integration.test_linear" name="test_bootstrap" time="0.867" /><testcase classname="tests.dataprob.test_integration.test_michelis-menten" name="test_ml" time="0.854" /><testcase classname="tests.dataprob.test_integration.test_michelis-menten" name="test_bayesian" time="4.206" /><testcase classname="tests.dataprob.test_integration.test_michelis-menten" name="test_bootstrap" time="0.929" /><testcase classname="tests.dataprob.test_integration.test_mixed-gaussian" name="test_ml" time="1.661" /><testcase classname="tests.dataprob.test_integration.test_mixed-gaussian" name="test_bayesian" time="13.051"><failure message="ValueError: autodetected range of [nan, nan] is not finite">@pytest.mark.slow
    def test_bayesian():
    
&gt;       _core_test(method="mcmc")

tests/dataprob/test_integration/test_mixed-gaussian.py:108: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/dataprob/test_integration/test_mixed-gaussian.py:93: in _core_test
    fig = dataprob.plot_summary(f)
../../../../miniconda3/lib/python3.12/site-packages/dataprob/plot/plot_summary.py:109: in plot_summary
    plot_residuals_hist(f,
../../../../miniconda3/lib/python3.12/site-packages/dataprob/plot/plot_residuals_hist.py:89: in plot_residuals_hist
    counts, edges = np.histogram(residual)
../../../../miniconda3/lib/python3.12/site-packages/numpy/lib/_histograms_impl.py:797: in histogram
    bin_edges, uniform_bins = _get_bin_edges(a, bins, range, weights)
../../../../miniconda3/lib/python3.12/site-packages/numpy/lib/_histograms_impl.py:430: in _get_bin_edges
    first_edge, last_edge = _get_outer_edges(a, range)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan,
       nan, nan, nan, nan, nan, nan, nan, nan,..., nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan,
       nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan])
range = None

    def _get_outer_edges(a, range):
        """
        Determine the outer bin edges to use, from either the data or the range
        argument
        """
        if range is not None:
            first_edge, last_edge = range
            if first_edge &gt; last_edge:
                raise ValueError(
                    'max must be larger than min in range parameter.')
            if not (np.isfinite(first_edge) and np.isfinite(last_edge)):
                raise ValueError(
                    "supplied range of [{}, {}] is not finite".format(first_edge, last_edge))
        elif a.size == 0:
            # handle empty arrays. Can't determine range, so use 0-1.
            first_edge, last_edge = 0, 1
        else:
            first_edge, last_edge = a.min(), a.max()
            if not (np.isfinite(first_edge) and np.isfinite(last_edge)):
&gt;               raise ValueError(
                    "autodetected range of [{}, {}] is not finite".format(first_edge, last_edge))
E               ValueError: autodetected range of [nan, nan] is not finite

../../../../miniconda3/lib/python3.12/site-packages/numpy/lib/_histograms_impl.py:323: ValueError</failure></testcase><testcase classname="tests.dataprob.test_integration.test_mixed-gaussian" name="test_bootstrap" time="15.577" /><testcase classname="tests.dataprob.test_integration.test_periodic" name="test_ml" time="0.783" /><testcase classname="tests.dataprob.test_integration.test_periodic" name="test_bayesian" time="4.221" /><testcase classname="tests.dataprob.test_integration.test_periodic" name="test_bootstrap" time="0.966" /><testcase classname="tests.dataprob.test_integration.test_polynomial" name="test_ml" time="1.237" /><testcase classname="tests.dataprob.test_integration.test_polynomial" name="test_bayesian" time="4.671" /><testcase classname="tests.dataprob.test_integration.test_polynomial" name="test_bootstrap" time="1.254" /><testcase classname="tests.dataprob.test_integration.test_random" name="test_bayesian" time="14.323" /><testcase classname="tests.dataprob.test_package" name="test_generic_stuff" time="0.000" /><testcase classname="tests.dataprob.util.test_check" name="test_check_bool" time="0.001" /><testcase classname="tests.dataprob.util.test_check" name="test_check_float" time="0.001" /><testcase classname="tests.dataprob.util.test_check" name="test_check_int" time="0.001" /><testcase classname="tests.dataprob.util.test_check" name="test_check_array" time="0.013" /><testcase classname="tests.dataprob.util.test_read_spreadsheet" name="test_read_spreadsheet" time="0.028" /></testsuite></testsuites>